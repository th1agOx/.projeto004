* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;  /* prefixo para suavisação de fonte */
    -moz-osx-font-smoothing: grayscale;    
}

:root {
    font-size: 62.5%; 
    /* hsl( eixoY cor; eixoX saturação, iluminação */
    --hue: 100;
    --color-base-white: hsl(0, 0%, 100%);
    --color-base-gray-100: hsl(0, 0%, 96%) ;
    --color-base-gray-300: hsl(var(--hue), 60%, 50%) ;
    --color-base-gray-900: hsl(var(--hue), 60%, 20%) ;
    --color-base-font : hsl(0, 0%, 24%) ;
    --color-base-font-footer: hsl(240, 6%, 21%);
}

html,
body,
input {
    font-family: "Mulish", sans-serif;
}

body {
    font-size: 1.6rem;

    background-color: var(--color-base-white);
    color: var(--color-base-gray-900);
}

#app {
    display: grid ;
    grid-template-rows: max-content 1fr max-content ;   
    
    height: 100vh ;
}

.container{
    padding: 1.6rem 3.2rem;
    width: min(112rem, 100%);
    margin: 0 auto;
}

main{
    overflow-y: scroll;
    scrollbar-gutter: stable both-edges;

    background-color: var(--color-base-gray-100);
}


header,
nav,
ul  {
    display:flex;
    align-items: center;
    gap: 7.2rem;

    font-weight: 700;
}

header form {
    flex: 1;  
}

.input-wrapper label { 
    width: 1px;
    height: 1px;
    overflow: hidden;
    position: absolute;
}

.input-wrapper input{
    width: 100%;
    height: 4.8rem;

    padding: 1.6rem;

    background-color: var(--color-base-gray-100);

    border: none;
    border-radius: .6rem;

    font-size: 1.6rem;
    font-weight: 600;
}

.input-wrapper input::placeholder {   /* cor de fonte em 3d aspecto diferente de cor */ 
    color: var(--color-base-font);
    opacity: 0.56;
}

nav ul {
    list-style: none;
    color: var(--color-base-gray-300);
}

nav ul span {
    font-weight: 700;

    color: var(--color-base-gray-900);
}

nav ul:hover {
    cursor: pointer;
}

.avatar{
    width: 4.2rem;
    height: 4.2rem;

    object-fit: cover;  /* quadrado perfeito */

    border-radius: 50%;
}

footer ul, a {
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: 7.2rem;
    
    font-weight: 600;
    
    color: var(--color-base-font-footer);
}

ul li {
    list-style: none; 
}

ul li a {
    text-decoration: none;
}

footer ul,a::placeholder {
    color: var(--color-base-font);
}


/* gallery */

main h1 {
    padding-top: 1.6rem;

    font-size: 2.4rem;
    font-weight: 700;
    color: var(--color-base-gray-900);
}

.item {
    background-color: var(--color-base-white);
    border-radius: .8rem;
    overflow: hidden;
}

.details {
    padding: 2.2rem 2.2rem 1.2rem;
    background-color: var(--color-base-white);
    z-index: 1;
    position: relative;

    font-size: 1.8rem;
}

.tag {
    padding: 0 2.2rem 2.2rem;
}

.tag span {
    padding: .8rem;
    
    font-size: 1.1rem;
    line-height: 0;

    background-color: var(--color-base-gray-100);
    border-radius: .6rem;
}

.gallery {
    margin-top: 3.6rem;

    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2.2rem;
}

.item img {
    width: 100%;
    aspect-ratio: 16/9;
    object-fit: cover;

    /* transition-property: all;
    transition-duration: 200ms;
    transition-delay: 0s;
    transition-timing-function: ease-out; */

    transition: all .2s ease-out;
    display: block;
}

.item img:hover{
    filter: hue-rotate(7deg) contrast(101%) saturate(200%);
    transform:scale(1.1) rotate(-2deg);        
    
    cursor: pointer;
}

header {
    --startY: -100%;
    animation: move 200ms; 
}

footer {
    --startY: 100% ;
    animation: move 200ms;
}

@keyframes move {                   /* animação de texto introduzindo-se no ambiente */
   from {
    transform: translateY(var(--startY));
   }
}

.item{
    --delay: .4s;
    animation: appear .4s var(--delay) backwards;     /*váriavel delei setada em todos os elementos html*/
}

@keyframes appear {                 /* aparição das images */
    0% {
        opacity: 0;
        transform: scale(0.7);      /* escala de proporção com que a imagem vai aparecendo na viewport */
    }

    50% {
        transform: scale(1.2);
    }
}









/*  
    max-content: é responsável por expandir o conteudo ao máximo, conforme os elementos vão sendo
    adcionados dentro das caixas. 

    width: min(112rem, 100%) -> nos diz que o conteudo se transforma em 100% ao estar com 1120px, 
    depois disso ele fica fixo 

    overflow-y -> faz com que o scrool do mouse fique na direção eixo y, e somente no conteudo
    desejado, não para a página inteira;
    scrollbar-gutter: stable both-edges -> dessa forma o scrool não ocupará um espaço ná viewport.

    para a váriavel, não chama-se a informação, mas a caixa var no elemento que eu for aplicar ela.

    o elemento com flex: 1 ocupará todo o conteudo.

    Proporção de imagem, 16x9 -> aspect ratio, para que a imagem não fique esticada -> object-fit cover 

    overflow = transbordar hidden = esconde o conteudo que está transbordando


    ###ANIMAÇÃO :


    filter -> bluer = embaçado ; brightness = brilho ; contrast = contraste de imagem ; 
    gray-scale = imagem em cinza ; hue-rotate = coloração de imagem ; sepia = envelhecimento
    deg = medida de filtro em graus

    Transform -> transformação de imagem, ela pode receber um tamanho maior
    no rotate negativo, ela rotaciona para esquerda e no positivo para a direita

    Transition -> transição de imagem suaviza a sua a ação da sua tranformação
    ela ocorre andes do hover e pode transicionar tanto o filtro quanto sua própria transformação;
    função cubic-bezier() responsavél pela duração da animação de trancição, 

    Animation -> Toda animação tem um ponto de partida e um ponto final 
    0%(from) ponto de partida  100%(to) ponto de chegada, tudo se basea em uma linha do tempo 
    Calc() faz o calculo das propriedades postas dentro da função
    Animation-name = nome da animação escrita apos o @keyframes
    as animações no css são definidas pelo @keyframes + o nome escolhido 
    Animation-fill-mode = puxa as informações das animações, no 0% ou no 100%
    Animation-direction
    com a animação ocorrendo no 50%, o elemento parte até o ponto final, e volta,
    sem precisar necessáriamente do 0% e do 100%
    Animation-interation-cont = o numero de eventos acontecerá mais vezes
    é possivel analisar o Animation-time-function ( gráfico de velocidade de animação ), no
    dev tools.
    esse temporizador pode ser setado pelo cubic-bazier / cubic-bazier( x1, y1, x2, y2 );
    ou de uma maneira mais estática, por steps / ease, ease-in, ease-out, ease-in-out, steps, linear

    para que a animação pare ao passar o mouse sobre o elemento -> 
    :hover - animation-play-state: paused (iniciar e pausar animação)

    ##SHORTHARD ANIMATION:

    - a animação receberá todos os elementos resumidos em uma linha

    animation: name duration fill-mode direction iteration-count time-function 
    animation: move 1s forwards alternate infinite ease-in 

    backwards puxa as informações do keyframe e passa para o elemento desejado
